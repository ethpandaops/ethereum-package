---
description: Ethereum Package Architecture - Kurtosis-based multi-client Ethereum network orchestration
globs:
  - "**/*.star"
  - "**/*.yaml"
  - "**/*.yml"
alwaysApply: false
---

# Ethereum Package Architecture

This package orchestrates the deployment and management of private Ethereum testnets and public devnets using Kurtosis. It supports multi-client configurations for both execution and consensus layers.

## Core Architecture Principles

### 1. Participant-Based Design
- Each participant represents a complete Ethereum node (EL + CL + optional VC + optional signer)
- Participants can be configured individually or through matrices for multi-client testing
- Service discovery and coordination happens through the Kurtosis plan API

### 2. Modular Component Structure
- **Execution Layer (EL)**: Supports geth, nethermind, erigon, besu, reth, ethereumjs, nimbus-eth1
- **Consensus Layer (CL)**: Supports lighthouse, teku, nimbus, prysm, lodestar, grandine
- **Validator Clients (VC)**: Can run separately or integrated with CL clients
- **Additional Services**: MEV infrastructure, monitoring, testing tools, explorers

### 3. Network Types
- **Devnet**: Private development networks with custom genesis
- **Public Networks**: Mainnet, sepolia, holesky, and other public testnets
- **Shadowforks**: Fork existing networks at specific blocks
- **Ephemery**: Short-lived testnets with automatic reset

### 4. Key Technical Patterns
- **Starlark-based Configuration**: All orchestration logic in `.star` files
- **Template-driven Generation**: Static configuration templates in `static_files/`
- **Service Isolation**: Each component runs in isolated containers
- **Dynamic Port Management**: Automatic port allocation with optional public exposure
- **Persistent Storage**: Optional persistent volumes for stateful services

## Directory Structure

```
src/
├── cl/                     # Consensus layer client launchers
├── el/                     # Execution layer client launchers
├── vc/                     # Validator client configurations
├── mev/                    # MEV infrastructure (boost, relay, builder)
├── network_launcher/       # Network initialization strategies
├── package_io/             # Input parsing and validation
├── prelaunch_data_generator/ # Genesis and keystore generation
├── shared_utils/           # Common utilities
└── [additional_services]/  # Monitoring, testing, exploration tools
```

## Service Lifecycle

1. **Input Validation**: Parse and validate network parameters
2. **Genesis Generation**: Create genesis data for both EL and CL
3. **Network Launch**: Deploy nodes according to participant configuration
4. **Service Discovery**: Establish peer connections and API endpoints
5. **Additional Services**: Deploy optional monitoring, testing, and tooling

## Resource Management
- CPU/Memory limits configurable per service
- Volume sizes adjustable for different network types
- Kubernetes tolerations and node selectors for cluster scheduling
- Docker cache support for optimized image pulling