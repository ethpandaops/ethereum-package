
endpoints:
{{ range $client := .ClientInfo }}
- name: "{{ $client.Name }}"
  consensusUrl: "http://{{ $client.CLIPAddr }}:{{ $client.CLPortNum }}"
  executionUrl: "http://{{ $client.ELIPAddr }}:{{ $client.ELPortNum }}"
{{- end }}

web:
  server:
    host: "0.0.0.0"
    port: 8080
  frontend:
    enabled: true
    debug: true
    pprof: true

validatorNames:
  inventoryYaml: "/validator-ranges/validator-ranges.yaml"

globalVars:
  walletPrivkey: "850643a0224065ecce3882673c21f56bcf6eef86274cc21cadff15930b59fc8c"
  validatorPairNames:
{{ range $client := .ClientInfo }}
  - "{{ $client.Name }}"
{{- end }}

tests:
{{ if .RunStabilityCheck }}
- name: "Check chain stability"
  timeout: 2h
  tasks:
  - name: check_clients_are_healthy
    title: "Check if at least one client is ready"
    timeout: 5m
    config:
      minClientCount: 1

  - name: run_tasks_concurrent
    title: "Check if all EL & CL clients are synced"
    timeout: 30m
    config:
      tasks:
      - name: check_consensus_sync_status
        title: "Check if CL clients are synced"
      - name: check_execution_sync_status
        title: "Check if EL clients are synced"
  
  - name: run_tasks_concurrent
    title: "Check chain stability"
    timeout: 1h
    config:
      tasks:
      - name: check_consensus_finality
        title: "Check consensus chain finality"
        config:
          minFinalizedEpochs: 2
          maxUnfinalizedEpochs: 3
      - name: check_consensus_attestation_stats
        title: "Check consensus attestation stats"
        config:
          minTargetPercent: 98
          minHeadPercent: 80
      - name: check_consensus_reorgs
        title: "Check consensus reorgs"
        config:
          maxReorgsPerEpoch: 2
          minCheckEpochCount: 1
      - name: check_consensus_forks
        title: "Check consensus forks"
{{ end }}

{{ if .RunBlockProposalCheck }}
- name: "Every client pair proposed a block"
  timeout: 2h
  disable: false
  tasks:
  - name: check_clients_are_healthy
    title: "Check if at least one client is ready"
    timeout: 5m
    config:
      minClientCount: 1
  
  - name: run_task_matrix
    title: "Check block proposals from all client pairs"
    configVars:
      matrixValues: "validatorPairNames"
    config:
      runConcurrent: true
      matrixVar: "validatorPairName"
      task:
        name: check_consensus_block_proposals
        title: "Wait for block proposal from ${validatorPairName}"
        configVars:
          validatorNamePattern: "validatorPairName"
{{ end }}

{{ if .RunTransactionTest }}
- name: "Transaction Test"
  timeout: 2h
  tasks:
  - name: check_clients_are_healthy
    title: "Check if at least one client is ready"
    timeout: 5m
    config:
      minClientCount: 1

  # check if all client pairs propose blocks with legacy EOA transactions
  - name: run_tasks_concurrent
    title: "Check if all clients propose blocks with legacy EOA transactions"
    config:
      succeedTaskCount: 1
      tasks:
      - name: generate_eoa_transactions
        title: "Generate 10 EOA transaction per block"
        config:
          childWallets: 10
          limitPending: 10
          limitPerBlock: 10
          randomTarget: true
          amount: 1000000
          randomAmount: true
          legacyTxType: true
        configVars:
          privateKey: "walletPrivkey"

      - name: run_task_matrix
        title: "Check transaction inclusion with all client pairs"
        timeout: 1h
        configVars:
          matrixValues: "validatorPairNames"
        config:
          runConcurrent: true
          matrixVar: "validatorPairName"
          task:
            name: check_consensus_block_proposals
            title: "Wait for block proposal with >= 5 transactions from ${validatorPairName}"
            configVars:
              validatorNamePattern: "validatorPairName"
            config:
              minTransactionCount: 5
  - name: "sleep"
    title: "Wait 30sec to clear up pending transactions"
    config:
      duration: 30s

  # check if legacy EOA transactions can be sent via each client pair
  - name: run_task_matrix
    title: "Check if legacy EOA transactions can be sent via each client pair"
    configVars:
      matrixValues: "validatorPairNames"
    config:
      runConcurrent: false
      matrixVar: "validatorPairName"
      task:
        name: run_tasks
        title: "Check if legacy EOA transactions can be sent via ${validatorPairName}"
        config:
          tasks:
          - name: run_tasks_concurrent
            title: "Check if legacy EOA transactions can be sent via ${validatorPairName}"
            config:
              succeedTaskCount: 1
              tasks:
              - name: generate_eoa_transactions
                title: "Generate 10 EOA transaction per block and send via ${validatorPairName}"
                config:
                  childWallets: 10
                  limitPending: 10
                  limitPerBlock: 10
                  randomTarget: true
                  amount: 1000000
                  randomAmount: true
                  legacyTxType: true
                configVars:
                  privateKey: "walletPrivkey"
                  clientPattern: "validatorPairName"
              - name: check_consensus_block_proposals
                title: "Wait for block proposal with >= 5 transactions"
                config:
                  minTransactionCount: 5
          - name: "sleep"
            title: "Wait 30sec to clear up pending transactions"
            config:
              duration: 30s

  # check if all client pairs propose blocks with dynfee EOA transactions
  - name: run_tasks_concurrent
    title: "Check if all clients propose blocks with dynfee EOA transactions"
    config:
      succeedTaskCount: 1
      tasks:
      - name: generate_eoa_transactions
        title: "Generate 10 EOA transaction per block"
        config:
          childWallets: 10
          limitPending: 10
          limitPerBlock: 10
          randomTarget: true
          amount: 1000000
          randomAmount: true
        configVars:
          privateKey: "walletPrivkey"

      - name: run_task_matrix
        title: "Check transaction inclusion with all client pairs"
        timeout: 1h
        configVars:
          matrixValues: "validatorPairNames"
        config:
          runConcurrent: true
          matrixVar: "validatorPairName"
          task:
            name: check_consensus_block_proposals
            title: "Wait for block proposal with >= 5 transactions from ${validatorPairName}"
            configVars:
              validatorNamePattern: "validatorPairName"
            config:
              minTransactionCount: 5
  - name: "sleep"
    title: "Wait 30sec to clear up pending transactions"
    config:
      duration: 30s

  # check if dynfee EOA transactions can be sent via each client pair
  - name: run_task_matrix
    title: "Check if dynfee EOA transactions can be sent via each client pair"
    configVars:
      matrixValues: "validatorPairNames"
    config:
      runConcurrent: false
      matrixVar: "validatorPairName"
      task:
        name: run_tasks
        title: "Check if dynfee EOA transactions can be sent via ${validatorPairName}"
        config:
          tasks:
          - name: run_tasks_concurrent
            title: "Check if dynfee EOA transactions can be sent via ${validatorPairName}"
            config:
              succeedTaskCount: 1
              tasks:
              - name: generate_eoa_transactions
                title: "Generate 10 EOA transaction per block and send via ${validatorPairName}"
                config:
                  childWallets: 10
                  limitPending: 10
                  limitPerBlock: 10
                  randomTarget: true
                  amount: 1000000
                  randomAmount: true
                configVars:
                  privateKey: "walletPrivkey"
                  clientPattern: "validatorPairName"
              - name: check_consensus_block_proposals
                title: "Wait for block proposal with >= 5 transactions"
                config:
                  minTransactionCount: 5
          - name: "sleep"
            title: "Wait 30sec to clear up pending transactions"
            config:
              duration: 30s
{{ end }}

{{ if .RunBlobTransactionTest }}
- name: "Blob Transaction Test"
  timeout: 1h
  tasks:
  - name: check_clients_are_healthy
    title: "Check if at least one client is ready"
    timeout: 5m
    config:
      minClientCount: 1

  # check if all client pairs propose blocks with blob transactions
  - name: run_tasks_concurrent
    title: "Check if all clients propose blocks with blob transactions"
    config:
      succeedTaskCount: 1
      tasks:
      - name: generate_blob_transactions
        title: "Generate 2 blob transactions per block"
        config:
          childWallets: 5
          limitPending: 2
          limitPerBlock: 2
          randomTarget: true
          amount: 1000000
          randomAmount: true
          blobSidecars: 1
        configVars:
          privateKey: "walletPrivkey"

      - name: run_task_matrix
        title: "Check transaction inclusion with all client pairs"
        timeout: 1h
        configVars:
          matrixValues: "validatorPairNames"
        config:
          runConcurrent: true
          matrixVar: "validatorPairName"
          task:
            name: check_consensus_block_proposals
            title: "Wait for block proposal with >= 2 blobs from ${validatorPairName}"
            configVars:
              validatorNamePattern: "validatorPairName"
            config:
              minBlobCount: 2
  - name: "sleep"
    title: "Wait 30sec to clear up pending transactions"
    config:
      duration: 30s

  # check if blob transactions can be sent via each client pair
  - name: run_task_matrix
    title: "Check if blob transactions can be sent via each client pair"
    configVars:
      matrixValues: "validatorPairNames"
    config:
      runConcurrent: false
      matrixVar: "validatorPairName"
      task:
        name: run_tasks
        title: "Check if blob transactions can be sent via ${validatorPairName}"
        config:
          tasks:
          - name: run_tasks_concurrent
            title: "Check if blob transactions can be sent via ${validatorPairName}"
            config:
              succeedTaskCount: 1
              tasks:
              - name: generate_blob_transactions
                title: "Generate 2 blob transactions per block and send via ${validatorPairName}"
                config:
                  childWallets: 5
                  limitPending: 2
                  limitPerBlock: 2
                  randomTarget: true
                  amount: 1000000
                  randomAmount: true
                  blobSidecars: 1
                configVars:
                  privateKey: "walletPrivkey"
                  clientPattern: "validatorPairName"
              - name: check_consensus_block_proposals
                title: "Wait for block proposal with >= 2 blobs"
                config:
                  minBlobCount: 2
          - name: "sleep"
            title: "Wait 30sec to clear up pending transactions"
            config:
              duration: 30s
{{ end }}

{{ if .RunOpcodesTransactionTest }}
- name: "All-Opcodes Transaction Test"
  timeout: 1h
  tasks:
  - name: check_clients_are_healthy
    title: "Check if at least one client is ready"
    timeout: 5m
    config:
      minClientCount: 1

  - name: generate_transaction
    title: "Generate all-opcodes test transaction"
    config:
      feeCap: 5000000000 # 5 gwei
      gasLimit: 1000000
      contractDeployment: true
      callData: "602a61053901600052600160206000a1602a61053902600052600260206000a1602a61053903600052600360206000a1602a61053904600052600460206000a17fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd661053905600052600560206000a1602a61053906600052600660206000a17fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd661053907600052600760206000a1610400602a61053908600052600860206000a1610400602a61053909600052600960206000a1602a6105390a600052600a60206000a1602a6105390b600052600b60206000a1602a61053910600052601060206000a1602a61053911600052601160206000a17fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd661053912600052601260206000a17fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd661053913600052601360206000a1602a61053914600052601460206000a161053915600052601560206000a1602a61053916600052601660206000a1602a61053917600052601760206000a1602a61053918600052601860206000a161053919600052601960206000a1602a6105391a600052601a60206000a1602a6105391b600052601b60206000a1602a6105391c600052601c60206000a17fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6105391d600052601d60206000a16105396000526020600020600052602060206000a130600052603060206000a13031600052603160206000a132600052603260206000a133600052603360206000a134600052603460206000a1600035600052603560206000a136600052603660206000a160146002600137603760206000a138600052603860206000a160146002600139603960206000a13a600052603a60206000a1303b600052603b60206000a1601460026001303c603c60206000a1686000388082803990f360b81b600052600960006000f0808060005260f060206000a167100000000000000060005260205f5f5f5f855af13d600052603d60206000a13d600060003e603e60206000a13f600052603f60206000a16001430340600052604060206000a141600052604160206000a142600052604260206000a143600052604360206000a144600052604460206000a145600052604560206000a146600052604660206000a147600052604760206000a148600052604860206000a1610539600150600052605060206000a1600151600052605160206000a1610539600052605260206000a1610539600053605360206000a1610539600155605560206000a1600154600052605460206000a16642424242424242600052600f5801566710000000000000006000525b605660206000a1602a61053911600f5801576710000000000000006000525b605760206000a158600052605860206000a159600052605960206000a15a600052605a60206000a16001600052606060206000a1610102600052606160206000a162010203600052606260206000a16301020304600052606360206000a1640102030405600052606460206000a165010203040506600052606560206000a16601020304050607600052606660206000a1670102030405060708600052606760206000a168010203040506070809600052606860206000a16901020304050607080910600052606960206000a16a0102030405060708091011600052606a60206000a16b010203040506070809101112600052606b60206000a16c01020304050607080910111213600052606c60206000a16d0102030405060708091011121314600052606d60206000a16e010203040506070809101112131415600052606e60206000a16f01020304050607080910111213141516600052606f60206000a1700102030405060708091011121314151617600052607060206000a171010203040506070809101112131415161718600052607160206000a17201020304050607080910111213141516171819600052607260206000a1730102030405060708091011121314151617181920600052607360206000a174010203040506070809101112131415161718192021600052607460206000a17501020304050607080910111213141516171819202122600052607560206000a1760102030405060708091011121314151617181920212223600052607660206000a177010203040506070809101112131415161718192021222324600052607760206000a17801020304050607080910111213141516171819202122232425600052607860206000a1790102030405060708091011121314151617181920212223242526600052607960206000a17a010203040506070809101112131415161718192021222324252627600052607a60206000a17b01020304050607080910111213141516171819202122232425262728600052607b60206000a17c0102030405060708091011121314151617181920212223242526272829600052607c60206000a17d010203040506070809101112131415161718192021222324252627282930600052607d60206000a17e01020304050607080910111213141516171819202122232425262728293031600052607e60206000a17f0102030405060708091011121314151617181920212223242526272829303132600052607f60206000a1600060116022603360446055606660776088609960aa60bb60cc60dd60ee60ff80600052608060206000a181600052608160206000a182600052608260206000a183600052608360206000a184600052608460206000a185600052608560206000a186600052608660206000a187600052608760206000a188600052608860206000a189600052608960206000a18a600052608a60206000a18b600052608b60206000a18c600052608c60206000a18d600052608d60206000a18e600052608e60206000a18f600052608f60206000a1604290600052609060206000a1604291600052609160206000a1604292600052609260206000a1604293600052609360206000a1604294600052609460206000a1604295600052609560206000a1604296600052609660206000a1604297600052609760206000a1604298600052609860206000a1604299600052609960206000a160429a600052609a60206000a160429b600052609b60206000a160429c600052609c60206000a160429d600052609d60206000a160429e600052609e60206000a160429f600052609f60206000a161133760005260206000a060a160206000a1601160a260206000a26022601160a360206000a360336022601160a460206000a4686000388082803990f360b81b600052600960006000f08060005260f060206000a160205f5f5f5f85612710f160005260f160206000a160205f5f5f5f85612710f260005260f260206000a160205f5f5f845af460005260f460206000a1686000388082803990f360b81b6000526000600960006000f58060005260f560206000a160205f5f5f84612710fa60005260fa60206000a16000388082803990f3"
      failOnReject: true
      expectEvents:
      - { topic0: "0x0000000000000000000000000000000000000000000000000000000000000001", data: "0x0000000000000000000000000000000000000000000000000000000000000563" }
      - { topic0: "0x0000000000000000000000000000000000000000000000000000000000000002", data: "0x000000000000000000000000000000000000000000000000000000000000db5a" }
      - { topic0: "0x0000000000000000000000000000000000000000000000000000000000000003", data: "0x000000000000000000000000000000000000000000000000000000000000050f" }
      - { topic0: "0x0000000000000000000000000000000000000000000000000000000000000004", data: "0x000000000000000000000000000000000000000000000000000000000000001f" }
      - { topic0: "0x0000000000000000000000000000000000000000000000000000000000000005", data: "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1" }
      - { topic0: "0x0000000000000000000000000000000000000000000000000000000000000006", data: "0x0000000000000000000000000000000000000000000000000000000000000023" }
      - { topic0: "0x0000000000000000000000000000000000000000000000000000000000000007", data: "0x0000000000000000000000000000000000000000000000000000000000000023" }
      - { topic0: "0x0000000000000000000000000000000000000000000000000000000000000008", data: "0x0000000000000000000000000000000000000000000000000000000000000163" }
      - { topic0: "0x0000000000000000000000000000000000000000000000000000000000000009", data: "0x000000000000000000000000000000000000000000000000000000000000035a" }
      - { topic0: "0x000000000000000000000000000000000000000000000000000000000000000a", data: "0x22216e0e1bc703e8543d93e59e8f927277d1501d039f87b7aeb01fd538f0ee71" }
      - { topic0: "0x000000000000000000000000000000000000000000000000000000000000000b", data: "0x000000000000000000000000000000000000000000000000000000000000002a" }
      - { topic0: "0x0000000000000000000000000000000000000000000000000000000000000010", data: "0x0000000000000000000000000000000000000000000000000000000000000000" }
      - { topic0: "0x0000000000000000000000000000000000000000000000000000000000000011", data: "0x0000000000000000000000000000000000000000000000000000000000000001" }
      - { topic0: "0x0000000000000000000000000000000000000000000000000000000000000012", data: "0x0000000000000000000000000000000000000000000000000000000000000000" }
      - { topic0: "0x0000000000000000000000000000000000000000000000000000000000000013", data: "0x0000000000000000000000000000000000000000000000000000000000000001" }
      - { topic0: "0x0000000000000000000000000000000000000000000000000000000000000014", data: "0x0000000000000000000000000000000000000000000000000000000000000000" }
      - { topic0: "0x0000000000000000000000000000000000000000000000000000000000000015", data: "0x0000000000000000000000000000000000000000000000000000000000000000" }
      - { topic0: "0x0000000000000000000000000000000000000000000000000000000000000016", data: "0x0000000000000000000000000000000000000000000000000000000000000028" }
      - { topic0: "0x0000000000000000000000000000000000000000000000000000000000000017", data: "0x000000000000000000000000000000000000000000000000000000000000053b" }
      - { topic0: "0x0000000000000000000000000000000000000000000000000000000000000018", data: "0x0000000000000000000000000000000000000000000000000000000000000513" }
      - { topic0: "0x0000000000000000000000000000000000000000000000000000000000000019", data: "0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffac6" }
      - { topic0: "0x000000000000000000000000000000000000000000000000000000000000001a", data: "0x0000000000000000000000000000000000000000000000000000000000000000" }
      - { topic0: "0x000000000000000000000000000000000000000000000000000000000000001b", data: "0x0000000000000000000000000000000000000000000000000000000000000000" }
      - { topic0: "0x000000000000000000000000000000000000000000000000000000000000001c", data: "0x0000000000000000000000000000000000000000000000000000000000000000" }
      - { topic0: "0x000000000000000000000000000000000000000000000000000000000000001d", data: "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff" }
      - { topic0: "0x0000000000000000000000000000000000000000000000000000000000000020", data: "0x64525377d0e4fdc0b5cb83d111f37debd7efc1f40a572ff8a92bbeeb587a5603" }
      - { topic0: "0x0000000000000000000000000000000000000000000000000000000000000031", data: "0x0000000000000000000000000000000000000000000000000000000000000000" }
      - { topic0: "0x0000000000000000000000000000000000000000000000000000000000000034", data: "0x0000000000000000000000000000000000000000000000000000000000000000" }
      - { topic0: "0x0000000000000000000000000000000000000000000000000000000000000035", data: "0x0000000000000000000000000000000000000000000000000000000000000000" }
      - { topic0: "0x0000000000000000000000000000000000000000000000000000000000000036", data: "0x0000000000000000000000000000000000000000000000000000000000000000" }
      - { topic0: "0x0000000000000000000000000000000000000000000000000000000000000037", data: "0x0000000000000000000000000000000000000000000000000000000000000000" }
      - { topic0: "0x0000000000000000000000000000000000000000000000000000000000000038", data: "0x0000000000000000000000000000000000000000000000000000000000000a38" }
      - { topic0: "0x0000000000000000000000000000000000000000000000000000000000000039", data: "0x0061053901600052600160206000a1602a610539020000000000000000000a38" }
      - { topic0: "0x000000000000000000000000000000000000000000000000000000000000003b", data: "0x0000000000000000000000000000000000000000000000000000000000000000" }
      - { topic0: "0x000000000000000000000000000000000000000000000000000000000000003c", data: "0x0000000000000000000000000000000000000000000000000000000000000000" }
      - { topic0: "0x000000000000000000000000000000000000000000000000000000000000003d", data: "0x0000000000000000000000000000000000000000000000000000000000000009" }
      - { topic0: "0x000000000000000000000000000000000000000000000000000000000000003e", data: "0x6000388082803990f30000000000000000000000000000000000000000000009" }
      - { topic0: "0x000000000000000000000000000000000000000000000000000000000000003f", data: "0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470" }
      - { topic0: "0x0000000000000000000000000000000000000000000000000000000000000047", data: "0x0000000000000000000000000000000000000000000000000000000000000000" }
      - { topic0: "0x0000000000000000000000000000000000000000000000000000000000000050", data: "0x0000000000000000000000000000000000000000000000000000000000000539" }
      - { topic0: "0x0000000000000000000000000000000000000000000000000000000000000051", data: "0x0000000000000000000000000000000000000000000000000000000000053900" }
      - { topic0: "0x0000000000000000000000000000000000000000000000000000000000000052", data: "0x0000000000000000000000000000000000000000000000000000000000000539" }
      - { topic0: "0x0000000000000000000000000000000000000000000000000000000000000053", data: "0x3900000000000000000000000000000000000000000000000000000000000539" }
      - { topic0: "0x0000000000000000000000000000000000000000000000000000000000000054", data: "0x0000000000000000000000000000000000000000000000000000000000000539" }
      - { topic0: "0x0000000000000000000000000000000000000000000000000000000000000055", data: "0x3900000000000000000000000000000000000000000000000000000000000539" }
      - { topic0: "0x0000000000000000000000000000000000000000000000000000000000000056", data: "0x0000000000000000000000000000000000000000000000000042424242424242" }
      - { topic0: "0x0000000000000000000000000000000000000000000000000000000000000057", data: "0x0000000000000000000000000000000000000000000000000042424242424242" }
      - { topic0: "0x0000000000000000000000000000000000000000000000000000000000000058", data: "0x0000000000000000000000000000000000000000000000000000000000000435" }
      - { topic0: "0x0000000000000000000000000000000000000000000000000000000000000059", data: "0x0000000000000000000000000000000000000000000000000000000000000040" }
    configVars:
      privateKey: "walletPrivkey"

  - name: run_tasks_concurrent
    title: "Check chain stability"
    timeout: 1h
    config:
      tasks:
      - name: check_consensus_reorgs
        title: "Check consensus reorgs"
        config:
          maxReorgsPerEpoch: 2
          minCheckEpochCount: 1
      - name: check_consensus_forks
        title: "Check consensus forks"
        config:
          minCheckEpochCount: 1

{{ end }}


{{ if .RunLifecycleTest }}
- name: "Validator Lifecycle Test"
  timeout: 72h
  testVars:
    validatorMnemonic: "trial jeans seat abstract runway cupboard please elevator club file arrow lounge crash sun thumb clock duty priority key fence funny trick diary album"
  tasks:
  - name: check_clients_are_healthy
    title: "Check if at least one client is ready"
    timeout: 5m
    config:
      minClientCount: 1
  
  - name: run_tasks_concurrent
    title: "Generate deposits & Track inclusion"
    config:
      tasks:
      - name: generate_deposits
        title: "Generate 300 deposits"
        config:
          limitTotal: 300
          depositContract: "0x4242424242424242424242424242424242424242"
        configVars:
          walletPrivkey: "walletPrivkey"
          mnemonic: "validatorMnemonic"

      - name: run_task_options
        title: "Check deposit inclusion"
        config:
          ignoreFailure: true
          task:
            name: run_task_matrix
            title: "Check deposit inclusion with all client pairs"
            timeout: 48h
            configVars:
              matrixValues: "validatorPairNames"
            config:
              runConcurrent: true
              matrixVar: "validatorPairName"
              task:
                name: check_consensus_block_proposals
                title: "Wait for block proposal with deposits from ${validatorPairName}"
                configVars:
                  validatorNamePattern: "validatorPairName"
                config:
                  minDepositCount: 1
      
  # due to the deposits we should reach un-finality soon.
  - name: check_consensus_validator_status
    title: "Wait for the last deposit to become activated"
    timeout: 48h
    config:
      validatorPubKey: 0xa4a6121cb76eaf63e520615368a21d504c6f7363b5045f965e3587f623a6f7f1ce32af63ce3c535e75cd831db27c5abd
      validatorStatus:
      - active_ongoing

  # due to the deposits we should have reached un-finality now.
  - name: check_consensus_finality
    title: "Check for consensus chain un-finality"
    timeout: 1m
    config:
      minUnfinalizedEpochs: 5

  # check if all client pairs propose blocks with bls changes during un-finality
  - name: run_tasks_concurrent
    title: "Check if all clients propose blocks with BLS changes during un-finality"
    config:
      tasks:
      - name: generate_bls_changes
        title: "Generate 50 BLS changes (1 bls change per slot)"
        config:
          limitTotal: 50
          limitPerSlot: 1
          indexCount: 100
          targetAddress: 0x65D08a056c17Ae13370565B04cF77D2AfA1cB9FA
        configVars:
          mnemonic: "validatorMnemonic"

      - name: run_task_matrix
        title: "Check bls change inclusion with all client pairs"
        timeout: 1h
        configVars:
          matrixValues: "validatorPairNames"
        config:
          runConcurrent: true
          matrixVar: "validatorPairName"
          task:
            name: check_consensus_block_proposals
            title: "Wait for block proposal with deposits from ${validatorPairName}"
            configVars:
              validatorNamePattern: "validatorPairName"
            config:
              minBlsChangeCount: 1
  
  # check if all client pairs propose blocks with exits during un-finality
  - name: run_tasks_concurrent
    title: "Check if all clients propose blocks with exits during un-finality"
    config:
      tasks:
      - name: generate_exits
        title: "Generate 50 Voluntary Exits (1 exit per slot)"
        config:
          limitTotal: 50
          limitPerSlot: 1
          indexCount: 100
        configVars:
          mnemonic: "validatorMnemonic"

      - name: run_task_matrix
        title: "Check exit inclusion with all client pairs"
        timeout: 1h
        configVars:
          matrixValues: "validatorPairNames"
        config:
          runConcurrent: true
          matrixVar: "validatorPairName"
          task:
            name: check_consensus_block_proposals
            title: "Wait for block proposal with deposits from ${validatorPairName}"
            configVars:
              validatorNamePattern: "validatorPairName"
            config:
              minExitCount: 1

  # check if all client pairs propose blocks with attester slashings
  - name: run_tasks_concurrent
    title: "Check if all clients propose blocks with attester slashings during un-finality"
    config:
      tasks:
      - name: generate_slashings
        title: "Generate 1 attester slashing per slot"
        config:
          slashingType: "attester"
          startIndex: 50
          limitTotal: 50
          limitPerSlot: 1
          indexCount: 50
        configVars:
          mnemonic: "validatorMnemonic"

      - name: run_task_matrix
        title: "Check slashing inclusion with all client pairs"
        timeout: 1h
        configVars:
          matrixValues: "validatorPairNames"
        config:
          runConcurrent: true
          matrixVar: "validatorPairName"
          task:
            name: check_consensus_block_proposals
            title: "Wait for block proposal with attester slashings from ${validatorPairName}"
            configVars:
              validatorNamePattern: "validatorPairName"
            config:
              minAttesterSlashingCount: 1

  # check if all client pairs propose blocks with proposer slashings
  - name: run_tasks_concurrent
    title: "Check if all clients propose blocks with proposer slashings during un-finality"
    config:
      tasks:
      - name: generate_slashings
        title: "Generate 1 proposer slashing per slot"
        config:
          slashingType: "proposer"
          startIndex: 100
          limitTotal: 50
          limitPerSlot: 1
          indexCount: 50
        configVars:
          mnemonic: "validatorMnemonic"

      - name: run_task_matrix
        title: "Check slashing inclusion with all client pairs"
        timeout: 1h
        configVars:
          matrixValues: "validatorPairNames"
        config:
          runConcurrent: true
          matrixVar: "validatorPairName"
          task:
            name: check_consensus_block_proposals
            title: "Wait for block proposal with proposer slashings from ${validatorPairName}"
            configVars:
              validatorNamePattern: "validatorPairName"
            config:
              minProposerSlashingCount: 1

  # exit 150 validators and wait for finality
  - name: generate_exits
    title: "Exit 150 Validators"
    config:
      indexCount: 150
    configVars:
      mnemonic: "validatorMnemonic"
  - name: check_consensus_finality
    title: "Wait for consensus chain finality"
    timeout: 18h
    config:
      maxUnfinalizedEpochs: 4

  # check if all client pairs propose blocks with bls changes during finality
  - name: run_tasks_concurrent
    title: "Check if all clients propose blocks with BLS changes during finality"
    config:
      tasks:
      - name: generate_bls_changes
        title: "Generate 1 bls change per slot"
        config:
          startIndex: 150
          limitTotal: 50
          limitPerSlot: 1
          indexCount: 50
          targetAddress: 0x65D08a056c17Ae13370565B04cF77D2AfA1cB9FA
        configVars:
          mnemonic: "validatorMnemonic"

      - name: run_task_matrix
        title: "Check bls change inclusion with all client pairs"
        timeout: 1h
        configVars:
          matrixValues: "validatorPairNames"
        config:
          runConcurrent: true
          matrixVar: "validatorPairName"
          task:
            name: check_consensus_block_proposals
            title: "Wait for block proposal with deposits from ${validatorPairName}"
            configVars:
              validatorNamePattern: "validatorPairName"
            config:
              minBlsChangeCount: 1
  
  # check if all client pairs propose blocks with exits during finality
  - name: run_tasks_concurrent
    title: "Check if all clients propose blocks with exits during finality"
    config:
      tasks:
      - name: generate_exits
        title: "Generate 1 exit per slot"
        config:
          startIndex: 150
          limitTotal: 50
          limitPerSlot: 1
          indexCount: 50
        configVars:
          mnemonic: "validatorMnemonic"

      - name: run_task_matrix
        title: "Check exit inclusion with all client pairs"
        timeout: 1h
        configVars:
          matrixValues: "validatorPairNames"
        config:
          runConcurrent: true
          matrixVar: "validatorPairName"
          task:
            name: check_consensus_block_proposals
            title: "Wait for block proposal with deposits from ${validatorPairName}"
            configVars:
              validatorNamePattern: "validatorPairName"
            config:
              minExitCount: 1
  
  # check if all client pairs propose blocks with attester slashings
  - name: run_tasks_concurrent
    title: "Check if all clients propose blocks with attester slashings during finality"
    config:
      tasks:
      - name: generate_slashings
        title: "Generate 1 attester slashing per slot"
        config:
          slashingType: "attester"
          startIndex: 200
          limitTotal: 50
          limitPerSlot: 1
          indexCount: 50
        configVars:
          mnemonic: "validatorMnemonic"

      - name: run_task_matrix
        title: "Check slashing inclusion with all client pairs"
        timeout: 1h
        configVars:
          matrixValues: "validatorPairNames"
        config:
          runConcurrent: true
          matrixVar: "validatorPairName"
          task:
            name: check_consensus_block_proposals
            title: "Wait for block proposal with attester slashings from ${validatorPairName}"
            configVars:
              validatorNamePattern: "validatorPairName"
            config:
              minAttesterSlashingCount: 1

  # check if all client pairs propose blocks with proposer slashings
  - name: run_tasks_concurrent
    title: "Check if all clients propose blocks with proposer slashings during finality"
    config:
      tasks:
      - name: generate_slashings
        title: "Generate 1 proposer slashing per slot"
        config:
          slashingType: "proposer"
          startIndex: 250
          limitTotal: 50
          limitPerSlot: 1
          indexCount: 50
        configVars:
          mnemonic: "validatorMnemonic"

      - name: run_task_matrix
        title: "Check slashing inclusion with all client pairs"
        timeout: 1h
        configVars:
          matrixValues: "validatorPairNames"
        config:
          runConcurrent: true
          matrixVar: "validatorPairName"
          task:
            name: check_consensus_block_proposals
            title: "Wait for block proposal with proposer slashings from ${validatorPairName}"
            configVars:
              validatorNamePattern: "validatorPairName"
            config:
              minProposerSlashingCount: 1

  cleanupTasks:
  - name: generate_exits
    title: "Exit all test validators"
    config:
      limitTotal: 300
      indexCount: 300
    configVars:
      mnemonic: "validatorMnemonic"

{{ end }}
