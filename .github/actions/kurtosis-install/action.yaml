name: Kurtosis install
inputs:
  version:
    description: 'Version to install'
    required: false
    default: 'latest'
runs:
  using: composite
  steps:
    - name: Install
      shell: bash
      run: |
        echo "deb [trusted=yes] https://apt.fury.io/kurtosis-tech/ /" | sudo tee /etc/apt/sources.list.d/kurtosis.list
        sudo apt update
        if [ "${{ inputs.version }}" = "latest" ]; then
          sudo apt install kurtosis-cli
        else
          sudo apt install kurtosis-cli=${{ inputs.version }}
        fi
        kurtosis analytics disable
        echo "$(dirname $(which kurtosis))" >> $GITHUB_PATH

        # Get the installed version and save it as an environment variable
        KURTOSIS_VERSION=$(kurtosis version | grep -o 'Version:[[:space:]]*[^[:space:]]*' | cut -d':' -f2 | tr -d ' ')
        echo "KURTOSIS_VERSION=$KURTOSIS_VERSION" >> $GITHUB_ENV
        echo "Installed Kurtosis version: $KURTOSIS_VERSION"

        # Extract tool versions from Kurtosis source code with fallbacks
        echo "Fetching tool versions from Kurtosis source..."
        echo "Tool versions extracted:"

        TRAEFIK_VERSION=$(curl -sf https://raw.githubusercontent.com/kurtosis-tech/kurtosis/main/container-engine-lib/lib/backend_impls/docker/docker_kurtosis_backend/reverse_proxy_functions/implementations/traefik/consts.go | grep 'containerImage.*=.*"traefik:' | sed 's/.*traefik:\([^"]*\)".*/\1/')
        echo "TRAEFIK_VERSION=$TRAEFIK_VERSION" >> $GITHUB_ENV
        echo "  Traefik: $TRAEFIK_VERSION"

        VECTOR_VERSION=$(curl -sf https://raw.githubusercontent.com/kurtosis-tech/kurtosis/main/container-engine-lib/lib/backend_impls/docker/docker_kurtosis_backend/logs_aggregator_functions/implementations/vector/consts.go | grep 'containerImage.*=.*"timberio/vector:' | sed 's/.*timberio\/vector:\([^"]*\)".*/\1/')
        echo "VECTOR_VERSION=$VECTOR_VERSION" >> $GITHUB_ENV
        echo "  Vector: $VECTOR_VERSION"

        FLUENTBIT_VERSION=$(curl -sf https://raw.githubusercontent.com/kurtosis-tech/kurtosis/main/container-engine-lib/lib/backend_impls/docker/docker_kurtosis_backend/logs_collector_functions/implementations/fluentbit/consts.go | grep 'containerImage.*=.*"fluent/fluent-bit:' | sed 's/.*fluent\/fluent-bit:\([^"]*\)".*/\1/')
        echo "FLUENTBIT_VERSION=$FLUENTBIT_VERSION" >> $GITHUB_ENV
        echo "  Fluent-bit: $FLUENTBIT_VERSION"

        ALPINE_VERSION=$(curl -sf https://raw.githubusercontent.com/kurtosis-tech/kurtosis/main/container-engine-lib/lib/backend_impls/docker/docker_kurtosis_backend/logs_collector_functions/implementations/fluentbit/fluentbit_configuration_creator.go | grep 'configuratorContainerImage.*=.*"alpine:' | sed 's/.*alpine:\([^"]*\)".*/\1/')
        echo "ALPINE_VERSION=$ALPINE_VERSION" >> $GITHUB_ENV
        echo "  Alpine: $ALPINE_VERSION"

        BLACK_VERSION=$(curl -sf https://raw.githubusercontent.com/kurtosis-tech/kurtosis/main/cli/cli/commands/lint/lint.go | grep 'pyBlackDockerImage.*=.*"pyfound/black:' | sed 's/.*pyfound\/black:\([^"]*\)".*/\1/')
        echo "BLACK_VERSION=$BLACK_VERSION" >> $GITHUB_ENV
        echo "  Black: $BLACK_VERSION"

        CURL_JQ_VERSION="latest"  # badouralix/curl-jq uses latest tag by default in Kurtosis
        echo "CURL_JQ_VERSION=$CURL_JQ_VERSION" >> $GITHUB_ENV
        echo "  Curl-jq: $CURL_JQ_VERSION"

        EGG_VERSION=$(grep -A1 'DEFAULT_ETHEREUM_GENESIS_GENERATOR_IMAGE = (' $GITHUB_WORKSPACE/src/package_io/constants.star | grep 'ethpandaops/ethereum-genesis-generator:' | sed 's/.*ethpandaops\/ethereum-genesis-generator:\([^"]*\)".*/\1/')
        echo "EGG_VERSION=$EGG_VERSION" >> $GITHUB_ENV
        echo "  EGG: $EGG_VERSION"

        LIGHTHOUSE_VERSION=$(grep '"lighthouse": "sigp/lighthouse:' $GITHUB_WORKSPACE/src/package_io/input_parser.star | head -1 | sed 's/.*sigp\/lighthouse:\([^"]*\)".*/\1/')
        echo "LIGHTHOUSE_VERSION=$LIGHTHOUSE_VERSION" >> $GITHUB_ENV
        echo "  Lighthouse: $LIGHTHOUSE_VERSION"

        CLIENT_GO_VERSION=$(grep '"geth": "ethereum/client-go:' $GITHUB_WORKSPACE/src/package_io/input_parser.star | sed 's/.*ethereum\/client-go:\([^"]*\)".*/\1/')
        echo "CLIENT_GO_VERSION=$CLIENT_GO_VERSION" >> $GITHUB_ENV
        echo "  Client-go: $CLIENT_GO_VERSION"

        VAL_TOOLS_VERSION=$(grep 'ETH_VAL_TOOLS_IMAGE = "protolambda/eth2-val-tools:' $GITHUB_WORKSPACE/src/prelaunch_data_generator/validator_keystores/validator_keystore_generator.star | sed 's/.*protolambda\/eth2-val-tools:\([^"]*\)".*/\1/')
        echo "VAL_TOOLS_VERSION=$VAL_TOOLS_VERSION" >> $GITHUB_ENV
        echo "  Val-tools: $VAL_TOOLS_VERSION"

    - name: Pull images
      shell: bash
      run: |
        # Pull images in parallel
        echo "Starting parallel docker pulls..."
        docker pull docker.ethquokkaops.io/dh/kurtosistech/engine:$KURTOSIS_VERSION &
        docker pull docker.ethquokkaops.io/dh/kurtosistech/files-artifacts-expander:$KURTOSIS_VERSION &
        docker pull docker.ethquokkaops.io/dh/kurtosistech/core:$KURTOSIS_VERSION &
        docker pull docker.ethquokkaops.io/dh/timberio/vector:$VECTOR_VERSION &
        docker pull docker.ethquokkaops.io/dh/fluent/fluent-bit:$FLUENTBIT_VERSION &
        docker pull docker.ethquokkaops.io/dh/alpine:$ALPINE_VERSION &
        docker pull docker.ethquokkaops.io/dh/traefik:$TRAEFIK_VERSION &
        docker pull docker.ethquokkaops.io/dh/badouralix/curl-jq:$CURL_JQ_VERSION &
        docker pull docker.ethquokkaops.io/dh/pyfound/black:$BLACK_VERSION &
        docker pull docker.ethquokkaops.io/dh/ethpandaops/ethereum-genesis-generator:$EGG_VERSION &
        docker pull docker.ethquokkaops.io/dh/sigp/lighthouse:$LIGHTHOUSE_VERSION &
        docker pull docker.ethquokkaops.io/dh/ethereum/client-go:$CLIENT_GO_VERSION &
        docker pull docker.ethquokkaops.io/dh/protolambda/eth2-val-tools:$VAL_TOOLS_VERSION &

        # Wait for all pulls to complete
        wait
        echo "All docker pulls completed"

        # Tag images sequentially (fast operation)
        docker tag docker.ethquokkaops.io/dh/kurtosistech/engine:$KURTOSIS_VERSION kurtosistech/engine:$KURTOSIS_VERSION
        docker tag docker.ethquokkaops.io/dh/kurtosistech/files-artifacts-expander:$KURTOSIS_VERSION kurtosistech/files-artifacts-expander:$KURTOSIS_VERSION
        docker tag docker.ethquokkaops.io/dh/kurtosistech/core:$KURTOSIS_VERSION kurtosistech/core:$KURTOSIS_VERSION
        docker tag docker.ethquokkaops.io/dh/timberio/vector:$VECTOR_VERSION timberio/vector:$VECTOR_VERSION
        docker tag docker.ethquokkaops.io/dh/fluent/fluent-bit:$FLUENTBIT_VERSION fluent/fluent-bit:$FLUENTBIT_VERSION
        docker tag docker.ethquokkaops.io/dh/alpine:$ALPINE_VERSION alpine:$ALPINE_VERSION
        docker tag docker.ethquokkaops.io/dh/traefik:$TRAEFIK_VERSION traefik:$TRAEFIK_VERSION
        docker tag docker.ethquokkaops.io/dh/badouralix/curl-jq:$CURL_JQ_VERSION badouralix/curl-jq:$CURL_JQ_VERSION
        docker tag docker.ethquokkaops.io/dh/pyfound/black:$BLACK_VERSION pyfound/black:$BLACK_VERSION
        docker tag docker.ethquokkaops.io/dh/ethpandaops/ethereum-genesis-generator:$EGG_VERSION ethpandaops/ethereum-genesis-generator:$EGG_VERSION
        docker tag docker.ethquokkaops.io/dh/sigp/lighthouse:$LIGHTHOUSE_VERSION sigp/lighthouse:$LIGHTHOUSE_VERSION
        docker tag docker.ethquokkaops.io/dh/ethereum/client-go:$CLIENT_GO_VERSION ethereum/client-go:$CLIENT_GO_VERSION
        docker tag docker.ethquokkaops.io/dh/protolambda/eth2-val-tools:$VAL_TOOLS_VERSION protolambda/eth2-val-tools:$VAL_TOOLS_VERSION

